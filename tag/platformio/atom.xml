<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.taoidle.com</id>
    <title>Taoidle • Posts by &#34;platformio&#34; tag</title>
    <link href="https://www.taoidle.com" />
    <updated>2022-07-30T04:00:24.000Z</updated>
    <category term="opencv" />
    <category term="pyqt5" />
    <category term="python" />
    <category term="vscode" />
    <category term="图像处理" />
    <category term="教程" />
    <category term="android" />
    <category term="android studio" />
    <category term="arduino" />
    <category term="CLion" />
    <category term="esp8266" />
    <category term="nodemcu" />
    <category term="PlatformIO" />
    <category term="esp32" />
    <category term="esp32-s3-devkitc" />
    <category term="platformio" />
    <category term="git" />
    <category term="Linux" />
    <category term="manjaro" />
    <category term="nodejs" />
    <category term="npm" />
    <category term="原创教程" />
    <category term="Docker" />
    <category term="Raspberry Pi" />
    <category term="Raspberry Pi4b" />
    <category term="树莓派" />
    <category term="Bitwarden" />
    <category term="树莓派4b" />
    <category term="ubuntu" />
    <category term="ubuntu20.04" />
    <category term="cloudflare" />
    <category term="cloudflare worker" />
    <category term="github" />
    <category term="cdn" />
    <category term="typescript" />
    <category term="Apple" />
    <category term="esp01" />
    <category term="esp01s" />
    <category term="Homekit" />
    <category term="智能家居" />
    <category term="物联网" />
    <category term="苹果" />
    <category term="计算机视觉" />
    <category term="ARM" />
    <category term="arm-linux-gcc" />
    <category term="gcc" />
    <category term="tencent cloud" />
    <category term="scf" />
    <category term="leancloud" />
    <category term="upyun" />
    <category term="javascript" />
    <entry>
        <id>https://www.taoidle.com/2022/07/30/esp32-s3%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</id>
        <title>ESP32-S3 折腾记录</title>
        <link rel="alternate" href="https://www.taoidle.com/2022/07/30/esp32-s3%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;开发板：ESP32-S3-DEVKIT-C&lt;/p&gt;
&lt;p&gt;开发环境：Clion + Platformio&lt;/p&gt;
&lt;p&gt;开发方式：Arduino&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h2&gt;
&lt;h3 id=&#34;关于-esp32-s3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于-esp32-s3&#34;&gt;#&lt;/a&gt; 关于 ESP32-S3&lt;/h3&gt;
&lt;p&gt;为什么选择使用 ESP32-S3？&lt;/p&gt;
&lt;p&gt;在 TMD 芯片贵上天的今天，一片 STM32F103C8T6 也要接近 20 块钱，在加一个 NF24L01 价格上跟一片 ESP32-S3-WROOM-1/ESP32-S3-WROOM-1U N16R8 差不多，但是资源上被 ESP32-S3 甩了 10086 条街。&lt;/p&gt;
&lt;p&gt;先看一下 ESP32-S3-WROOM-1 N16R8 这个模组 (ESP32-S3-WROOM-1 采用 PCB 板载天线，ESP32-S3-WROOM-1U 采用连接器连接外部天线，资源一致)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xtensa® 32 位 LX7 双核处理器，五级流水线架构，主频高达 240 MHz&lt;/li&gt;
&lt;li&gt;2.4 GHz WiFi &amp;amp; Bluetooth 5&lt;/li&gt;
&lt;li&gt;PSRAM：8MB&lt;/li&gt;
&lt;li&gt;FALSH: 16MB&lt;/li&gt;
&lt;li&gt;GPIO: 45&lt;/li&gt;
&lt;li&gt;SPI: 4&lt;/li&gt;
&lt;li&gt;I2C: 2&lt;/li&gt;
&lt;li&gt;I2S: 2&lt;/li&gt;
&lt;li&gt;ADC: 12&lt;/li&gt;
&lt;li&gt;TOUCH: 14&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，ESP32-S3 安全机制也非常完善&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全启动&lt;/li&gt;
&lt;li&gt;Flash 加密&lt;/li&gt;
&lt;li&gt;4-Kbit OTP，用户可用的高达 1792 位&lt;/li&gt;
&lt;li&gt;加密硬件加速器：
&lt;ul&gt;
&lt;li&gt;AES-128/256 (FIPS PUB 197)&lt;/li&gt;
&lt;li&gt;Hash (FIPS PUB 180-4)&lt;/li&gt;
&lt;li&gt;RSA&lt;/li&gt;
&lt;li&gt;随机数生成器 (RNG)&lt;/li&gt;
&lt;li&gt;HMAC&lt;/li&gt;
&lt;li&gt;数字签名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如此丰富的硬件资源足够做很多 “大玩具”，是折腾用的不二选择，以下内容记录 ESP32-S3 里踩的坑，不定时更新...&lt;/p&gt;
&lt;p&gt;下面为 ESP32-S3-DEVKIT-C 开发板引脚定义图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/ESP32-S3_DevKitC-1_pinlayout_v1.1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;spi-sd卡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spi-sd卡&#34;&gt;#&lt;/a&gt; SPI SD 卡&lt;/h3&gt;
&lt;p&gt;官方示例如下，在官方示例中引脚为默认，在实际场景中往往需要自定义引脚。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/*
 * Connect the SD card to the following pins:
 *
 * SD Card | ESP32
 *    D2       -
 *    D3       SS
 *    CMD      MOSI
 *    VSS      GND
 *    VDD      3.3V
 *    CLK      SCK
 *    VSS      GND
 *    D0       MISO
 *    D1       -
 */
#include &amp;quot;FS.h&amp;quot;
#include &amp;quot;SD.h&amp;quot;
#include &amp;quot;SPI.h&amp;quot;

void listDir(fs::FS &amp;amp;fs, const char * dirname, uint8_t levels)&amp;#123;
    Serial.printf(&amp;quot;Listing directory: %s\n&amp;quot;, dirname);

    File root = fs.open(dirname);
    if(!root)&amp;#123;
        Serial.println(&amp;quot;Failed to open directory&amp;quot;);
        return;
    &amp;#125;
    if(!root.isDirectory())&amp;#123;
        Serial.println(&amp;quot;Not a directory&amp;quot;);
        return;
    &amp;#125;

    File file = root.openNextFile();
    while(file)&amp;#123;
        if(file.isDirectory())&amp;#123;
            Serial.print(&amp;quot;  DIR : &amp;quot;);
            Serial.println(file.name());
            if(levels)&amp;#123;
                listDir(fs, file.path(), levels -1);
            &amp;#125;
        &amp;#125; else &amp;#123;
            Serial.print(&amp;quot;  FILE: &amp;quot;);
            Serial.print(file.name());
            Serial.print(&amp;quot;  SIZE: &amp;quot;);
            Serial.println(file.size());
        &amp;#125;
        file = root.openNextFile();
    &amp;#125;
&amp;#125;

void createDir(fs::FS &amp;amp;fs, const char * path)&amp;#123;
    Serial.printf(&amp;quot;Creating Dir: %s\n&amp;quot;, path);
    if(fs.mkdir(path))&amp;#123;
        Serial.println(&amp;quot;Dir created&amp;quot;);
    &amp;#125; else &amp;#123;
        Serial.println(&amp;quot;mkdir failed&amp;quot;);
    &amp;#125;
&amp;#125;

void removeDir(fs::FS &amp;amp;fs, const char * path)&amp;#123;
    Serial.printf(&amp;quot;Removing Dir: %s\n&amp;quot;, path);
    if(fs.rmdir(path))&amp;#123;
        Serial.println(&amp;quot;Dir removed&amp;quot;);
    &amp;#125; else &amp;#123;
        Serial.println(&amp;quot;rmdir failed&amp;quot;);
    &amp;#125;
&amp;#125;

void readFile(fs::FS &amp;amp;fs, const char * path)&amp;#123;
    Serial.printf(&amp;quot;Reading file: %s\n&amp;quot;, path);

    File file = fs.open(path);
    if(!file)&amp;#123;
        Serial.println(&amp;quot;Failed to open file for reading&amp;quot;);
        return;
    &amp;#125;

    Serial.print(&amp;quot;Read from file: &amp;quot;);
    while(file.available())&amp;#123;
        Serial.write(file.read());
    &amp;#125;
    file.close();
&amp;#125;

void writeFile(fs::FS &amp;amp;fs, const char * path, const char * message)&amp;#123;
    Serial.printf(&amp;quot;Writing file: %s\n&amp;quot;, path);

    File file = fs.open(path, FILE_WRITE);
    if(!file)&amp;#123;
        Serial.println(&amp;quot;Failed to open file for writing&amp;quot;);
        return;
    &amp;#125;
    if(file.print(message))&amp;#123;
        Serial.println(&amp;quot;File written&amp;quot;);
    &amp;#125; else &amp;#123;
        Serial.println(&amp;quot;Write failed&amp;quot;);
    &amp;#125;
    file.close();
&amp;#125;

void appendFile(fs::FS &amp;amp;fs, const char * path, const char * message)&amp;#123;
    Serial.printf(&amp;quot;Appending to file: %s\n&amp;quot;, path);

    File file = fs.open(path, FILE_APPEND);
    if(!file)&amp;#123;
        Serial.println(&amp;quot;Failed to open file for appending&amp;quot;);
        return;
    &amp;#125;
    if(file.print(message))&amp;#123;
        Serial.println(&amp;quot;Message appended&amp;quot;);
    &amp;#125; else &amp;#123;
        Serial.println(&amp;quot;Append failed&amp;quot;);
    &amp;#125;
    file.close();
&amp;#125;

void renameFile(fs::FS &amp;amp;fs, const char * path1, const char * path2)&amp;#123;
    Serial.printf(&amp;quot;Renaming file %s to %s\n&amp;quot;, path1, path2);
    if (fs.rename(path1, path2)) &amp;#123;
        Serial.println(&amp;quot;File renamed&amp;quot;);
    &amp;#125; else &amp;#123;
        Serial.println(&amp;quot;Rename failed&amp;quot;);
    &amp;#125;
&amp;#125;

void deleteFile(fs::FS &amp;amp;fs, const char * path)&amp;#123;
    Serial.printf(&amp;quot;Deleting file: %s\n&amp;quot;, path);
    if(fs.remove(path))&amp;#123;
        Serial.println(&amp;quot;File deleted&amp;quot;);
    &amp;#125; else &amp;#123;
        Serial.println(&amp;quot;Delete failed&amp;quot;);
    &amp;#125;
&amp;#125;

void testFileIO(fs::FS &amp;amp;fs, const char * path)&amp;#123;
    File file = fs.open(path);
    static uint8_t buf[512];
    size_t len = 0;
    uint32_t start = millis();
    uint32_t end = start;
    if(file)&amp;#123;
        len = file.size();
        size_t flen = len;
        start = millis();
        while(len)&amp;#123;
            size_t toRead = len;
            if(toRead &amp;gt; 512)&amp;#123;
                toRead = 512;
            &amp;#125;
            file.read(buf, toRead);
            len -= toRead;
        &amp;#125;
        end = millis() - start;
        Serial.printf(&amp;quot;%u bytes read for %u ms\n&amp;quot;, flen, end);
        file.close();
    &amp;#125; else &amp;#123;
        Serial.println(&amp;quot;Failed to open file for reading&amp;quot;);
    &amp;#125;


    file = fs.open(path, FILE_WRITE);
    if(!file)&amp;#123;
        Serial.println(&amp;quot;Failed to open file for writing&amp;quot;);
        return;
    &amp;#125;

    size_t i;
    start = millis();
    for(i=0; i&amp;lt;2048; i++)&amp;#123;
        file.write(buf, 512);
    &amp;#125;
    end = millis() - start;
    Serial.printf(&amp;quot;%u bytes written for %u ms\n&amp;quot;, 2048 * 512, end);
    file.close();
&amp;#125;

void setup()&amp;#123;
    Serial.begin(115200);
    if(!SD.begin())&amp;#123;
        Serial.println(&amp;quot;Card Mount Failed&amp;quot;);
        return;
    &amp;#125;
    uint8_t cardType = SD.cardType();

    if(cardType == CARD_NONE)&amp;#123;
        Serial.println(&amp;quot;No SD card attached&amp;quot;);
        return;
    &amp;#125;

    Serial.print(&amp;quot;SD Card Type: &amp;quot;);
    if(cardType == CARD_MMC)&amp;#123;
        Serial.println(&amp;quot;MMC&amp;quot;);
    &amp;#125; else if(cardType == CARD_SD)&amp;#123;
        Serial.println(&amp;quot;SDSC&amp;quot;);
    &amp;#125; else if(cardType == CARD_SDHC)&amp;#123;
        Serial.println(&amp;quot;SDHC&amp;quot;);
    &amp;#125; else &amp;#123;
        Serial.println(&amp;quot;UNKNOWN&amp;quot;);
    &amp;#125;

    uint64_t cardSize = SD.cardSize() / (1024 * 1024);
    Serial.printf(&amp;quot;SD Card Size: %lluMB\n&amp;quot;, cardSize);

    listDir(SD, &amp;quot;/&amp;quot;, 0);
    createDir(SD, &amp;quot;/mydir&amp;quot;);
    listDir(SD, &amp;quot;/&amp;quot;, 0);
    removeDir(SD, &amp;quot;/mydir&amp;quot;);
    listDir(SD, &amp;quot;/&amp;quot;, 2);
    writeFile(SD, &amp;quot;/hello.txt&amp;quot;, &amp;quot;Hello &amp;quot;);
    appendFile(SD, &amp;quot;/hello.txt&amp;quot;, &amp;quot;World!\n&amp;quot;);
    readFile(SD, &amp;quot;/hello.txt&amp;quot;);
    deleteFile(SD, &amp;quot;/foo.txt&amp;quot;);
    renameFile(SD, &amp;quot;/hello.txt&amp;quot;, &amp;quot;/foo.txt&amp;quot;);
    readFile(SD, &amp;quot;/foo.txt&amp;quot;);
    testFileIO(SD, &amp;quot;/test.txt&amp;quot;);
    Serial.printf(&amp;quot;Total space: %lluMB\n&amp;quot;, SD.totalBytes() / (1024 * 1024));
    Serial.printf(&amp;quot;Used space: %lluMB\n&amp;quot;, SD.usedBytes() / (1024 * 1024));
&amp;#125;

void loop()&amp;#123;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是，这里 SPI SD 卡必须接 5V，官方示例中接入为 3.3V，在实际中不行，会报错。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sdcard_mount(): f_mount failed: (3) The physical drive cannot work
Card Mount Failed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正确做法应该将 SPI SD 接入 5V 后，自己初始化 SPI 引脚后传入 SD 卡初始化&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;SPI.h&amp;gt;
#include &amp;lt;FS.h&amp;gt;
#include &amp;lt;SD.h&amp;gt;

// VCC 5V

#define SD_MISO     13
#define SD_MOSI     11
#define SD_SCLK     12
#define SD_CS       10


void setup() &amp;#123;
    Serial.begin(115200);

    SPIClass spi = SPIClass(HSPI);
    spi.begin(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);


    if (!SD.begin(SD_CS, spi)) &amp;#123;
        Serial.println(&amp;quot;Card Mount Failed&amp;quot;);
        return;
    &amp;#125;
    uint8_t cardType = SD.cardType();

    if (cardType == CARD_NONE) &amp;#123;
        Serial.println(&amp;quot;No SD card attached&amp;quot;);
        return;
    &amp;#125;

    Serial.print(&amp;quot;SD Card Type: &amp;quot;);
    if (cardType == CARD_MMC) &amp;#123;
        Serial.println(&amp;quot;MMC&amp;quot;);
    &amp;#125; else if (cardType == CARD_SD) &amp;#123;
        Serial.println(&amp;quot;SDSC&amp;quot;);
    &amp;#125; else if (cardType == CARD_SDHC) &amp;#123;
        Serial.println(&amp;quot;SDHC&amp;quot;);
    &amp;#125; else &amp;#123;
        Serial.println(&amp;quot;UNKNOWN&amp;quot;);
    &amp;#125;

    uint64_t cardSize = SD.cardSize() / (1024 * 1024);
    Serial.printf(&amp;quot;SD Card Size: %lluMB\n&amp;quot;, cardSize);

    Serial.println(&amp;quot;initialisation done.&amp;quot;);
&amp;#125;

void loop() &amp;#123;

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;freertos&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#freertos&#34;&gt;#&lt;/a&gt; FreeRTOS&lt;/h3&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;h3 id=&#34;guislice&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#guislice&#34;&gt;#&lt;/a&gt; GUIslice&lt;/h3&gt;
&lt;p&gt;...&lt;/p&gt;
</content>
        <category term="arduino" />
        <category term="esp32" />
        <category term="esp32-s3-devkitc" />
        <category term="platformio" />
        <updated>2022-07-30T04:00:24.000Z</updated>
    </entry>
    <entry>
        <id>https://www.taoidle.com/2021/06/10/clionplatformio%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91nodemcu/</id>
        <title>CLion+PlatformIO环境搭建开发NodeMcu</title>
        <link rel="alternate" href="https://www.taoidle.com/2021/06/10/clionplatformio%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91nodemcu/"/>
        <content type="html">&lt;h3 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h3&gt;
&lt;p&gt;JB 家的东西实在是太好用了，丝毫不是因为我大半年没更新想水博客&lt;/p&gt;
&lt;h3 id=&#34;准备环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#准备环境&#34;&gt;#&lt;/a&gt; 准备环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python3&lt;/li&gt;
&lt;li&gt;CLion&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;准备材料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#准备材料&#34;&gt;#&lt;/a&gt; 准备材料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NodeMcu&lt;/li&gt;
&lt;li&gt;7 针 0.96 寸 OLED&lt;/li&gt;
&lt;li&gt;杜邦线若干&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h3&gt;
&lt;p&gt;1. 在 Clion Plugins 里搜索安装 PlatformIO for CLion，安装完成后重启 CLion&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623260501-image-1623260500170.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. 安装 PlatformIO Core (CLI)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows
&lt;ol&gt;
&lt;li&gt;下载 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3BsYXRmb3JtaW8vcGxhdGZvcm1pby1jb3JlLWluc3RhbGxlci9tYXN0ZXIvZ2V0LXBsYXRmb3JtaW8ucHk=&#34;&gt;get-platformio.py&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;打开 powershell&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; C:&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;to&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;dir&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;where&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;is&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;located&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;script&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;get-platformio.py &lt;span class=&#34;token comment&#34;&gt;# get-platformio.py 下载目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python.exe get-platformio.py &lt;span class=&#34;token comment&#34;&gt;# 运行脚本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linux/MacOS&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 terminal，下面命令三选一&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python3 -c &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; -fsSL https://raw.githubusercontent.com/platformio/platformio/master/scripts/get-platformio.py&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; -fsSL https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py -o get-platformio.py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python3 get-platformio.py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py -O get-platformio.py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python3 get-platformio.py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.CLion 创建 PlatformIO NodeMcu 项目&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623263906-image-1623263905423.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623264001-image-1623263999430.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623264411-image-1623264410352.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
&lt;p&gt;到此项目创建完成&lt;/p&gt;
&lt;p&gt;4. 配置 NodeMCU 项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改 CMakeLists.txt，将 main.cpp 添加到项目&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623264624-image-1623264622615.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入第三方库，如 U8g2&lt;/p&gt;
&lt;p&gt;在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wbGF0Zm9ybWlvLm9yZy9saWI=&#34;&gt; platformio lib&lt;/span&gt; 中搜索 U8g2 可以看到有两种安装方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 CLion 中打开 terminal，输入 pio lib install &amp;quot;olikraus/U8g2&amp;quot;&lt;/li&gt;
&lt;li&gt;编辑 platformio.ini 文件，在末尾中加入下面配置，编译时自动安装&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;lib_deps = olikraus/U8g2 @ ^2.28.8
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 CMakeLists.txt，将 U8g2 库添加到项目中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623266913-image-1623266912048.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改项目编译配置&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267020-image-1623267019679.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
&lt;p&gt;把 build 删除&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267165-image-1623267164884.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改串口监视器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267367-image-1623267366364.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267453-image-1623267452000.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5. 编写代码并编译上传到 NodeMCU&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267695-image-1623267693765.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267853-image-1623267850897.png&#34; alt=&#34;file&#34; /&gt;&lt;/p&gt;
</content>
        <category term="arduino" />
        <category term="CLion" />
        <category term="esp8266" />
        <category term="nodemcu" />
        <category term="PlatformIO" />
        <updated>2021-06-09T19:46:56.000Z</updated>
    </entry>
</feed>
