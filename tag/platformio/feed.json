{
    "version": "https://jsonfeed.org/version/1",
    "title": "Taoidle • All posts by \"platformio\" tag",
    "description": "秋深し、情けは人の、為ならず",
    "home_page_url": "https://www.taoidle.com",
    "items": [
        {
            "id": "https://www.taoidle.com/2022/07/30/esp32-s3%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/",
            "url": "https://www.taoidle.com/2022/07/30/esp32-s3%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/",
            "title": "ESP32-S3 折腾记录",
            "date_published": "2022-07-30T04:00:24.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>开发板：ESP32-S3-DEVKIT-C</p>\n<p>开发环境：Clion + Platformio</p>\n<p>开发方式：Arduino</p>\n<h2 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h2>\n<h3 id=\"关于-esp32-s3\"><a class=\"anchor\" href=\"#关于-esp32-s3\">#</a> 关于 ESP32-S3</h3>\n<p>为什么选择使用 ESP32-S3？</p>\n<p>在 TMD 芯片贵上天的今天，一片 STM32F103C8T6 也要接近 20 块钱，在加一个 NF24L01 价格上跟一片 ESP32-S3-WROOM-1/ESP32-S3-WROOM-1U N16R8 差不多，但是资源上被 ESP32-S3 甩了 10086 条街。</p>\n<p>先看一下 ESP32-S3-WROOM-1 N16R8 这个模组 (ESP32-S3-WROOM-1 采用 PCB 板载天线，ESP32-S3-WROOM-1U 采用连接器连接外部天线，资源一致)</p>\n<ul>\n<li>Xtensa® 32 位 LX7 双核处理器，五级流水线架构，主频高达 240 MHz</li>\n<li>2.4 GHz WiFi &amp; Bluetooth 5</li>\n<li>PSRAM：8MB</li>\n<li>FALSH: 16MB</li>\n<li>GPIO: 45</li>\n<li>SPI: 4</li>\n<li>I2C: 2</li>\n<li>I2S: 2</li>\n<li>ADC: 12</li>\n<li>TOUCH: 14</li>\n</ul>\n<p>除此之外，ESP32-S3 安全机制也非常完善</p>\n<ul>\n<li>安全启动</li>\n<li>Flash 加密</li>\n<li>4-Kbit OTP，用户可用的高达 1792 位</li>\n<li>加密硬件加速器：\n<ul>\n<li>AES-128/256 (FIPS PUB 197)</li>\n<li>Hash (FIPS PUB 180-4)</li>\n<li>RSA</li>\n<li>随机数生成器 (RNG)</li>\n<li>HMAC</li>\n<li>数字签名</li>\n</ul>\n</li>\n</ul>\n<p>如此丰富的硬件资源足够做很多 “大玩具”，是折腾用的不二选择，以下内容记录 ESP32-S3 里踩的坑，不定时更新...</p>\n<p>下面为 ESP32-S3-DEVKIT-C 开发板引脚定义图</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/ESP32-S3_DevKitC-1_pinlayout_v1.1.jpg\" alt=\"\" /></p>\n<h3 id=\"spi-sd卡\"><a class=\"anchor\" href=\"#spi-sd卡\">#</a> SPI SD 卡</h3>\n<p>官方示例如下，在官方示例中引脚为默认，在实际场景中往往需要自定义引脚。</p>\n<pre><code class=\"language-c++\">/*\n * Connect the SD card to the following pins:\n *\n * SD Card | ESP32\n *    D2       -\n *    D3       SS\n *    CMD      MOSI\n *    VSS      GND\n *    VDD      3.3V\n *    CLK      SCK\n *    VSS      GND\n *    D0       MISO\n *    D1       -\n */\n#include &quot;FS.h&quot;\n#include &quot;SD.h&quot;\n#include &quot;SPI.h&quot;\n\nvoid listDir(fs::FS &amp;fs, const char * dirname, uint8_t levels)&#123;\n    Serial.printf(&quot;Listing directory: %s\\n&quot;, dirname);\n\n    File root = fs.open(dirname);\n    if(!root)&#123;\n        Serial.println(&quot;Failed to open directory&quot;);\n        return;\n    &#125;\n    if(!root.isDirectory())&#123;\n        Serial.println(&quot;Not a directory&quot;);\n        return;\n    &#125;\n\n    File file = root.openNextFile();\n    while(file)&#123;\n        if(file.isDirectory())&#123;\n            Serial.print(&quot;  DIR : &quot;);\n            Serial.println(file.name());\n            if(levels)&#123;\n                listDir(fs, file.path(), levels -1);\n            &#125;\n        &#125; else &#123;\n            Serial.print(&quot;  FILE: &quot;);\n            Serial.print(file.name());\n            Serial.print(&quot;  SIZE: &quot;);\n            Serial.println(file.size());\n        &#125;\n        file = root.openNextFile();\n    &#125;\n&#125;\n\nvoid createDir(fs::FS &amp;fs, const char * path)&#123;\n    Serial.printf(&quot;Creating Dir: %s\\n&quot;, path);\n    if(fs.mkdir(path))&#123;\n        Serial.println(&quot;Dir created&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;mkdir failed&quot;);\n    &#125;\n&#125;\n\nvoid removeDir(fs::FS &amp;fs, const char * path)&#123;\n    Serial.printf(&quot;Removing Dir: %s\\n&quot;, path);\n    if(fs.rmdir(path))&#123;\n        Serial.println(&quot;Dir removed&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;rmdir failed&quot;);\n    &#125;\n&#125;\n\nvoid readFile(fs::FS &amp;fs, const char * path)&#123;\n    Serial.printf(&quot;Reading file: %s\\n&quot;, path);\n\n    File file = fs.open(path);\n    if(!file)&#123;\n        Serial.println(&quot;Failed to open file for reading&quot;);\n        return;\n    &#125;\n\n    Serial.print(&quot;Read from file: &quot;);\n    while(file.available())&#123;\n        Serial.write(file.read());\n    &#125;\n    file.close();\n&#125;\n\nvoid writeFile(fs::FS &amp;fs, const char * path, const char * message)&#123;\n    Serial.printf(&quot;Writing file: %s\\n&quot;, path);\n\n    File file = fs.open(path, FILE_WRITE);\n    if(!file)&#123;\n        Serial.println(&quot;Failed to open file for writing&quot;);\n        return;\n    &#125;\n    if(file.print(message))&#123;\n        Serial.println(&quot;File written&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;Write failed&quot;);\n    &#125;\n    file.close();\n&#125;\n\nvoid appendFile(fs::FS &amp;fs, const char * path, const char * message)&#123;\n    Serial.printf(&quot;Appending to file: %s\\n&quot;, path);\n\n    File file = fs.open(path, FILE_APPEND);\n    if(!file)&#123;\n        Serial.println(&quot;Failed to open file for appending&quot;);\n        return;\n    &#125;\n    if(file.print(message))&#123;\n        Serial.println(&quot;Message appended&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;Append failed&quot;);\n    &#125;\n    file.close();\n&#125;\n\nvoid renameFile(fs::FS &amp;fs, const char * path1, const char * path2)&#123;\n    Serial.printf(&quot;Renaming file %s to %s\\n&quot;, path1, path2);\n    if (fs.rename(path1, path2)) &#123;\n        Serial.println(&quot;File renamed&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;Rename failed&quot;);\n    &#125;\n&#125;\n\nvoid deleteFile(fs::FS &amp;fs, const char * path)&#123;\n    Serial.printf(&quot;Deleting file: %s\\n&quot;, path);\n    if(fs.remove(path))&#123;\n        Serial.println(&quot;File deleted&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;Delete failed&quot;);\n    &#125;\n&#125;\n\nvoid testFileIO(fs::FS &amp;fs, const char * path)&#123;\n    File file = fs.open(path);\n    static uint8_t buf[512];\n    size_t len = 0;\n    uint32_t start = millis();\n    uint32_t end = start;\n    if(file)&#123;\n        len = file.size();\n        size_t flen = len;\n        start = millis();\n        while(len)&#123;\n            size_t toRead = len;\n            if(toRead &gt; 512)&#123;\n                toRead = 512;\n            &#125;\n            file.read(buf, toRead);\n            len -= toRead;\n        &#125;\n        end = millis() - start;\n        Serial.printf(&quot;%u bytes read for %u ms\\n&quot;, flen, end);\n        file.close();\n    &#125; else &#123;\n        Serial.println(&quot;Failed to open file for reading&quot;);\n    &#125;\n\n\n    file = fs.open(path, FILE_WRITE);\n    if(!file)&#123;\n        Serial.println(&quot;Failed to open file for writing&quot;);\n        return;\n    &#125;\n\n    size_t i;\n    start = millis();\n    for(i=0; i&lt;2048; i++)&#123;\n        file.write(buf, 512);\n    &#125;\n    end = millis() - start;\n    Serial.printf(&quot;%u bytes written for %u ms\\n&quot;, 2048 * 512, end);\n    file.close();\n&#125;\n\nvoid setup()&#123;\n    Serial.begin(115200);\n    if(!SD.begin())&#123;\n        Serial.println(&quot;Card Mount Failed&quot;);\n        return;\n    &#125;\n    uint8_t cardType = SD.cardType();\n\n    if(cardType == CARD_NONE)&#123;\n        Serial.println(&quot;No SD card attached&quot;);\n        return;\n    &#125;\n\n    Serial.print(&quot;SD Card Type: &quot;);\n    if(cardType == CARD_MMC)&#123;\n        Serial.println(&quot;MMC&quot;);\n    &#125; else if(cardType == CARD_SD)&#123;\n        Serial.println(&quot;SDSC&quot;);\n    &#125; else if(cardType == CARD_SDHC)&#123;\n        Serial.println(&quot;SDHC&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;UNKNOWN&quot;);\n    &#125;\n\n    uint64_t cardSize = SD.cardSize() / (1024 * 1024);\n    Serial.printf(&quot;SD Card Size: %lluMB\\n&quot;, cardSize);\n\n    listDir(SD, &quot;/&quot;, 0);\n    createDir(SD, &quot;/mydir&quot;);\n    listDir(SD, &quot;/&quot;, 0);\n    removeDir(SD, &quot;/mydir&quot;);\n    listDir(SD, &quot;/&quot;, 2);\n    writeFile(SD, &quot;/hello.txt&quot;, &quot;Hello &quot;);\n    appendFile(SD, &quot;/hello.txt&quot;, &quot;World!\\n&quot;);\n    readFile(SD, &quot;/hello.txt&quot;);\n    deleteFile(SD, &quot;/foo.txt&quot;);\n    renameFile(SD, &quot;/hello.txt&quot;, &quot;/foo.txt&quot;);\n    readFile(SD, &quot;/foo.txt&quot;);\n    testFileIO(SD, &quot;/test.txt&quot;);\n    Serial.printf(&quot;Total space: %lluMB\\n&quot;, SD.totalBytes() / (1024 * 1024));\n    Serial.printf(&quot;Used space: %lluMB\\n&quot;, SD.usedBytes() / (1024 * 1024));\n&#125;\n\nvoid loop()&#123;\n\n&#125;\n</code></pre>\n<p>需要注意的是，这里 SPI SD 卡必须接 5V，官方示例中接入为 3.3V，在实际中不行，会报错。</p>\n<pre><code>sdcard_mount(): f_mount failed: (3) The physical drive cannot work\nCard Mount Failed\n</code></pre>\n<p>正确做法应该将 SPI SD 接入 5V 后，自己初始化 SPI 引脚后传入 SD 卡初始化</p>\n<pre><code class=\"language-c++\">#include &lt;SPI.h&gt;\n#include &lt;FS.h&gt;\n#include &lt;SD.h&gt;\n\n// VCC 5V\n\n#define SD_MISO     13\n#define SD_MOSI     11\n#define SD_SCLK     12\n#define SD_CS       10\n\n\nvoid setup() &#123;\n    Serial.begin(115200);\n\n    SPIClass spi = SPIClass(HSPI);\n    spi.begin(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);\n\n\n    if (!SD.begin(SD_CS, spi)) &#123;\n        Serial.println(&quot;Card Mount Failed&quot;);\n        return;\n    &#125;\n    uint8_t cardType = SD.cardType();\n\n    if (cardType == CARD_NONE) &#123;\n        Serial.println(&quot;No SD card attached&quot;);\n        return;\n    &#125;\n\n    Serial.print(&quot;SD Card Type: &quot;);\n    if (cardType == CARD_MMC) &#123;\n        Serial.println(&quot;MMC&quot;);\n    &#125; else if (cardType == CARD_SD) &#123;\n        Serial.println(&quot;SDSC&quot;);\n    &#125; else if (cardType == CARD_SDHC) &#123;\n        Serial.println(&quot;SDHC&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;UNKNOWN&quot;);\n    &#125;\n\n    uint64_t cardSize = SD.cardSize() / (1024 * 1024);\n    Serial.printf(&quot;SD Card Size: %lluMB\\n&quot;, cardSize);\n\n    Serial.println(&quot;initialisation done.&quot;);\n&#125;\n\nvoid loop() &#123;\n\n&#125;\n\n</code></pre>\n<h3 id=\"freertos\"><a class=\"anchor\" href=\"#freertos\">#</a> FreeRTOS</h3>\n<p>...</p>\n<h3 id=\"guislice\"><a class=\"anchor\" href=\"#guislice\">#</a> GUIslice</h3>\n<p>...</p>\n",
            "tags": [
                "arduino",
                "esp32",
                "esp32-s3-devkitc",
                "platformio"
            ]
        },
        {
            "id": "https://www.taoidle.com/2021/06/10/clionplatformio%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91nodemcu/",
            "url": "https://www.taoidle.com/2021/06/10/clionplatformio%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91nodemcu/",
            "title": "CLion+PlatformIO环境搭建开发NodeMcu",
            "date_published": "2021-06-09T19:46:56.000Z",
            "content_html": "<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>JB 家的东西实在是太好用了，丝毫不是因为我大半年没更新想水博客</p>\n<h3 id=\"准备环境\"><a class=\"anchor\" href=\"#准备环境\">#</a> 准备环境</h3>\n<ul>\n<li>Python3</li>\n<li>CLion</li>\n</ul>\n<h3 id=\"准备材料\"><a class=\"anchor\" href=\"#准备材料\">#</a> 准备材料</h3>\n<ul>\n<li>NodeMcu</li>\n<li>7 针 0.96 寸 OLED</li>\n<li>杜邦线若干</li>\n</ul>\n<h3 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h3>\n<p>1. 在 Clion Plugins 里搜索安装 PlatformIO for CLion，安装完成后重启 CLion</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623260501-image-1623260500170.png\" alt=\"\" /></p>\n<p>2. 安装 PlatformIO Core (CLI)</p>\n<ul>\n<li>Windows\n<ol>\n<li>下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3BsYXRmb3JtaW8vcGxhdGZvcm1pby1jb3JlLWluc3RhbGxlci9tYXN0ZXIvZ2V0LXBsYXRmb3JtaW8ucHk=\">get-platformio.py</span></li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>打开 powershell</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> C:<span class=\"token punctuation\">\\</span>path<span class=\"token punctuation\">\\</span>to<span class=\"token punctuation\">\\</span>dir<span class=\"token punctuation\">\\</span>where<span class=\"token punctuation\">\\</span>is<span class=\"token punctuation\">\\</span>located<span class=\"token punctuation\">\\</span>script<span class=\"token punctuation\">\\</span>get-platformio.py <span class=\"token comment\"># get-platformio.py 下载目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python.exe get-platformio.py <span class=\"token comment\"># 运行脚本</span></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>\n<p>Linux/MacOS</p>\n<ol>\n<li>打开 terminal，下面命令三选一</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python3 -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/platformio/platformio/master/scripts/get-platformio.py<span class=\"token variable\">)</span></span>\"</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py -o get-platformio.py</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3 get-platformio.py</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py -O get-platformio.py</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3 get-platformio.py</pre></td></tr></table></figure></li>\n</ul>\n<p>3.CLion 创建 PlatformIO NodeMcu 项目</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623263906-image-1623263905423.png\" alt=\"file\" /></p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623264001-image-1623263999430.png\" alt=\"file\" /></p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623264411-image-1623264410352.png\" alt=\"file\" /></p>\n<p>到此项目创建完成</p>\n<p>4. 配置 NodeMCU 项目</p>\n<ul>\n<li>\n<p>修改 CMakeLists.txt，将 main.cpp 添加到项目</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623264624-image-1623264622615.png\" alt=\"file\" /></p>\n</li>\n<li>\n<p>引入第三方库，如 U8g2</p>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbGF0Zm9ybWlvLm9yZy9saWI=\"> platformio lib</span> 中搜索 U8g2 可以看到有两种安装方法</p>\n<ol>\n<li>在 CLion 中打开 terminal，输入 pio lib install &quot;olikraus/U8g2&quot;</li>\n<li>编辑 platformio.ini 文件，在末尾中加入下面配置，编译时自动安装</li>\n</ol>\n<pre><code>lib_deps = olikraus/U8g2 @ ^2.28.8\n</code></pre>\n</li>\n<li>\n<p>修改 CMakeLists.txt，将 U8g2 库添加到项目中</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623266913-image-1623266912048.png\" alt=\"file\" /></p>\n</li>\n<li>\n<p>修改项目编译配置</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267020-image-1623267019679.png\" alt=\"file\" /></p>\n<p>把 build 删除</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267165-image-1623267164884.png\" alt=\"file\" /></p>\n</li>\n<li>\n<p>修改串口监视器</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267367-image-1623267366364.png\" alt=\"file\" /></p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267453-image-1623267452000.png\" alt=\"file\" /></p>\n</li>\n</ul>\n<p>5. 编写代码并编译上传到 NodeMCU</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267695-image-1623267693765.png\" alt=\"file\" /></p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/1623267853-image-1623267850897.png\" alt=\"file\" /></p>\n",
            "tags": [
                "arduino",
                "CLion",
                "esp8266",
                "nodemcu",
                "PlatformIO"
            ]
        }
    ]
}