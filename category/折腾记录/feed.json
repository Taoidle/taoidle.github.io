{
    "version": "https://jsonfeed.org/version/1",
    "title": "Taoidle • All posts by \"折腾记录\" category",
    "description": "秋深し、情けは人の、為ならず",
    "home_page_url": "https://www.taoidle.com",
    "items": [
        {
            "id": "https://www.taoidle.com/2022/07/30/esp32-s3%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/",
            "url": "https://www.taoidle.com/2022/07/30/esp32-s3%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/",
            "title": "ESP32-S3 折腾记录",
            "date_published": "2022-07-30T04:00:24.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>开发板：ESP32-S3-DEVKIT-C</p>\n<p>开发环境：Clion + Platformio</p>\n<p>开发方式：Arduino</p>\n<h2 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h2>\n<h3 id=\"关于-esp32-s3\"><a class=\"anchor\" href=\"#关于-esp32-s3\">#</a> 关于 ESP32-S3</h3>\n<p>为什么选择使用 ESP32-S3？</p>\n<p>在 TMD 芯片贵上天的今天，一片 STM32F103C8T6 也要接近 20 块钱，在加一个 NF24L01 价格上跟一片 ESP32-S3-WROOM-1/ESP32-S3-WROOM-1U N16R8 差不多，但是资源上被 ESP32-S3 甩了 10086 条街。</p>\n<p>先看一下 ESP32-S3-WROOM-1 N16R8 这个模组 (ESP32-S3-WROOM-1 采用 PCB 板载天线，ESP32-S3-WROOM-1U 采用连接器连接外部天线，资源一致)</p>\n<ul>\n<li>Xtensa® 32 位 LX7 双核处理器，五级流水线架构，主频高达 240 MHz</li>\n<li>2.4 GHz WiFi &amp; Bluetooth 5</li>\n<li>PSRAM：8MB</li>\n<li>FALSH: 16MB</li>\n<li>GPIO: 45</li>\n<li>SPI: 4</li>\n<li>I2C: 2</li>\n<li>I2S: 2</li>\n<li>ADC: 12</li>\n<li>TOUCH: 14</li>\n</ul>\n<p>除此之外，ESP32-S3 安全机制也非常完善</p>\n<ul>\n<li>安全启动</li>\n<li>Flash 加密</li>\n<li>4-Kbit OTP，用户可用的高达 1792 位</li>\n<li>加密硬件加速器：\n<ul>\n<li>AES-128/256 (FIPS PUB 197)</li>\n<li>Hash (FIPS PUB 180-4)</li>\n<li>RSA</li>\n<li>随机数生成器 (RNG)</li>\n<li>HMAC</li>\n<li>数字签名</li>\n</ul>\n</li>\n</ul>\n<p>如此丰富的硬件资源足够做很多 “大玩具”，是折腾用的不二选择，以下内容记录 ESP32-S3 里踩的坑，不定时更新...</p>\n<p>下面为 ESP32-S3-DEVKIT-C 开发板引脚定义图</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/ESP32-S3_DevKitC-1_pinlayout_v1.1.jpg\" alt=\"\" /></p>\n<h3 id=\"spi-sd卡\"><a class=\"anchor\" href=\"#spi-sd卡\">#</a> SPI SD 卡</h3>\n<p>官方示例如下，在官方示例中引脚为默认，在实际场景中往往需要自定义引脚。</p>\n<pre><code class=\"language-c++\">/*\n * Connect the SD card to the following pins:\n *\n * SD Card | ESP32\n *    D2       -\n *    D3       SS\n *    CMD      MOSI\n *    VSS      GND\n *    VDD      3.3V\n *    CLK      SCK\n *    VSS      GND\n *    D0       MISO\n *    D1       -\n */\n#include &quot;FS.h&quot;\n#include &quot;SD.h&quot;\n#include &quot;SPI.h&quot;\n\nvoid listDir(fs::FS &amp;fs, const char * dirname, uint8_t levels)&#123;\n    Serial.printf(&quot;Listing directory: %s\\n&quot;, dirname);\n\n    File root = fs.open(dirname);\n    if(!root)&#123;\n        Serial.println(&quot;Failed to open directory&quot;);\n        return;\n    &#125;\n    if(!root.isDirectory())&#123;\n        Serial.println(&quot;Not a directory&quot;);\n        return;\n    &#125;\n\n    File file = root.openNextFile();\n    while(file)&#123;\n        if(file.isDirectory())&#123;\n            Serial.print(&quot;  DIR : &quot;);\n            Serial.println(file.name());\n            if(levels)&#123;\n                listDir(fs, file.path(), levels -1);\n            &#125;\n        &#125; else &#123;\n            Serial.print(&quot;  FILE: &quot;);\n            Serial.print(file.name());\n            Serial.print(&quot;  SIZE: &quot;);\n            Serial.println(file.size());\n        &#125;\n        file = root.openNextFile();\n    &#125;\n&#125;\n\nvoid createDir(fs::FS &amp;fs, const char * path)&#123;\n    Serial.printf(&quot;Creating Dir: %s\\n&quot;, path);\n    if(fs.mkdir(path))&#123;\n        Serial.println(&quot;Dir created&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;mkdir failed&quot;);\n    &#125;\n&#125;\n\nvoid removeDir(fs::FS &amp;fs, const char * path)&#123;\n    Serial.printf(&quot;Removing Dir: %s\\n&quot;, path);\n    if(fs.rmdir(path))&#123;\n        Serial.println(&quot;Dir removed&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;rmdir failed&quot;);\n    &#125;\n&#125;\n\nvoid readFile(fs::FS &amp;fs, const char * path)&#123;\n    Serial.printf(&quot;Reading file: %s\\n&quot;, path);\n\n    File file = fs.open(path);\n    if(!file)&#123;\n        Serial.println(&quot;Failed to open file for reading&quot;);\n        return;\n    &#125;\n\n    Serial.print(&quot;Read from file: &quot;);\n    while(file.available())&#123;\n        Serial.write(file.read());\n    &#125;\n    file.close();\n&#125;\n\nvoid writeFile(fs::FS &amp;fs, const char * path, const char * message)&#123;\n    Serial.printf(&quot;Writing file: %s\\n&quot;, path);\n\n    File file = fs.open(path, FILE_WRITE);\n    if(!file)&#123;\n        Serial.println(&quot;Failed to open file for writing&quot;);\n        return;\n    &#125;\n    if(file.print(message))&#123;\n        Serial.println(&quot;File written&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;Write failed&quot;);\n    &#125;\n    file.close();\n&#125;\n\nvoid appendFile(fs::FS &amp;fs, const char * path, const char * message)&#123;\n    Serial.printf(&quot;Appending to file: %s\\n&quot;, path);\n\n    File file = fs.open(path, FILE_APPEND);\n    if(!file)&#123;\n        Serial.println(&quot;Failed to open file for appending&quot;);\n        return;\n    &#125;\n    if(file.print(message))&#123;\n        Serial.println(&quot;Message appended&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;Append failed&quot;);\n    &#125;\n    file.close();\n&#125;\n\nvoid renameFile(fs::FS &amp;fs, const char * path1, const char * path2)&#123;\n    Serial.printf(&quot;Renaming file %s to %s\\n&quot;, path1, path2);\n    if (fs.rename(path1, path2)) &#123;\n        Serial.println(&quot;File renamed&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;Rename failed&quot;);\n    &#125;\n&#125;\n\nvoid deleteFile(fs::FS &amp;fs, const char * path)&#123;\n    Serial.printf(&quot;Deleting file: %s\\n&quot;, path);\n    if(fs.remove(path))&#123;\n        Serial.println(&quot;File deleted&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;Delete failed&quot;);\n    &#125;\n&#125;\n\nvoid testFileIO(fs::FS &amp;fs, const char * path)&#123;\n    File file = fs.open(path);\n    static uint8_t buf[512];\n    size_t len = 0;\n    uint32_t start = millis();\n    uint32_t end = start;\n    if(file)&#123;\n        len = file.size();\n        size_t flen = len;\n        start = millis();\n        while(len)&#123;\n            size_t toRead = len;\n            if(toRead &gt; 512)&#123;\n                toRead = 512;\n            &#125;\n            file.read(buf, toRead);\n            len -= toRead;\n        &#125;\n        end = millis() - start;\n        Serial.printf(&quot;%u bytes read for %u ms\\n&quot;, flen, end);\n        file.close();\n    &#125; else &#123;\n        Serial.println(&quot;Failed to open file for reading&quot;);\n    &#125;\n\n\n    file = fs.open(path, FILE_WRITE);\n    if(!file)&#123;\n        Serial.println(&quot;Failed to open file for writing&quot;);\n        return;\n    &#125;\n\n    size_t i;\n    start = millis();\n    for(i=0; i&lt;2048; i++)&#123;\n        file.write(buf, 512);\n    &#125;\n    end = millis() - start;\n    Serial.printf(&quot;%u bytes written for %u ms\\n&quot;, 2048 * 512, end);\n    file.close();\n&#125;\n\nvoid setup()&#123;\n    Serial.begin(115200);\n    if(!SD.begin())&#123;\n        Serial.println(&quot;Card Mount Failed&quot;);\n        return;\n    &#125;\n    uint8_t cardType = SD.cardType();\n\n    if(cardType == CARD_NONE)&#123;\n        Serial.println(&quot;No SD card attached&quot;);\n        return;\n    &#125;\n\n    Serial.print(&quot;SD Card Type: &quot;);\n    if(cardType == CARD_MMC)&#123;\n        Serial.println(&quot;MMC&quot;);\n    &#125; else if(cardType == CARD_SD)&#123;\n        Serial.println(&quot;SDSC&quot;);\n    &#125; else if(cardType == CARD_SDHC)&#123;\n        Serial.println(&quot;SDHC&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;UNKNOWN&quot;);\n    &#125;\n\n    uint64_t cardSize = SD.cardSize() / (1024 * 1024);\n    Serial.printf(&quot;SD Card Size: %lluMB\\n&quot;, cardSize);\n\n    listDir(SD, &quot;/&quot;, 0);\n    createDir(SD, &quot;/mydir&quot;);\n    listDir(SD, &quot;/&quot;, 0);\n    removeDir(SD, &quot;/mydir&quot;);\n    listDir(SD, &quot;/&quot;, 2);\n    writeFile(SD, &quot;/hello.txt&quot;, &quot;Hello &quot;);\n    appendFile(SD, &quot;/hello.txt&quot;, &quot;World!\\n&quot;);\n    readFile(SD, &quot;/hello.txt&quot;);\n    deleteFile(SD, &quot;/foo.txt&quot;);\n    renameFile(SD, &quot;/hello.txt&quot;, &quot;/foo.txt&quot;);\n    readFile(SD, &quot;/foo.txt&quot;);\n    testFileIO(SD, &quot;/test.txt&quot;);\n    Serial.printf(&quot;Total space: %lluMB\\n&quot;, SD.totalBytes() / (1024 * 1024));\n    Serial.printf(&quot;Used space: %lluMB\\n&quot;, SD.usedBytes() / (1024 * 1024));\n&#125;\n\nvoid loop()&#123;\n\n&#125;\n</code></pre>\n<p>需要注意的是，这里 SPI SD 卡必须接 5V，官方示例中接入为 3.3V，在实际中不行，会报错。</p>\n<pre><code>sdcard_mount(): f_mount failed: (3) The physical drive cannot work\nCard Mount Failed\n</code></pre>\n<p>正确做法应该将 SPI SD 接入 5V 后，自己初始化 SPI 引脚后传入 SD 卡初始化</p>\n<pre><code class=\"language-c++\">#include &lt;SPI.h&gt;\n#include &lt;FS.h&gt;\n#include &lt;SD.h&gt;\n\n// VCC 5V\n\n#define SD_MISO     13\n#define SD_MOSI     11\n#define SD_SCLK     12\n#define SD_CS       10\n\n\nvoid setup() &#123;\n    Serial.begin(115200);\n\n    SPIClass spi = SPIClass(HSPI);\n    spi.begin(SD_SCLK, SD_MISO, SD_MOSI, SD_CS);\n\n\n    if (!SD.begin(SD_CS, spi)) &#123;\n        Serial.println(&quot;Card Mount Failed&quot;);\n        return;\n    &#125;\n    uint8_t cardType = SD.cardType();\n\n    if (cardType == CARD_NONE) &#123;\n        Serial.println(&quot;No SD card attached&quot;);\n        return;\n    &#125;\n\n    Serial.print(&quot;SD Card Type: &quot;);\n    if (cardType == CARD_MMC) &#123;\n        Serial.println(&quot;MMC&quot;);\n    &#125; else if (cardType == CARD_SD) &#123;\n        Serial.println(&quot;SDSC&quot;);\n    &#125; else if (cardType == CARD_SDHC) &#123;\n        Serial.println(&quot;SDHC&quot;);\n    &#125; else &#123;\n        Serial.println(&quot;UNKNOWN&quot;);\n    &#125;\n\n    uint64_t cardSize = SD.cardSize() / (1024 * 1024);\n    Serial.printf(&quot;SD Card Size: %lluMB\\n&quot;, cardSize);\n\n    Serial.println(&quot;initialisation done.&quot;);\n&#125;\n\nvoid loop() &#123;\n\n&#125;\n\n</code></pre>\n<h3 id=\"freertos\"><a class=\"anchor\" href=\"#freertos\">#</a> FreeRTOS</h3>\n<p>...</p>\n<h3 id=\"guislice\"><a class=\"anchor\" href=\"#guislice\">#</a> GUIslice</h3>\n<p>...</p>\n",
            "tags": [
                "arduino",
                "esp32",
                "esp32-s3-devkitc",
                "platformio"
            ]
        },
        {
            "id": "https://www.taoidle.com/2022/07/10/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%87%BD%E6%95%B0%E9%9A%8F%E6%9C%BA%E5%9B%BEapi%E5%AE%9E%E7%8E%B0/",
            "url": "https://www.taoidle.com/2022/07/10/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%87%BD%E6%95%B0%E9%9A%8F%E6%9C%BA%E5%9B%BEapi%E5%AE%9E%E7%8E%B0/",
            "title": "腾讯云函数随机图api实现",
            "date_published": "2022-07-10T11:11:32.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>为了提高博客在国内的访问速度，于是决定做一个部署在国内的随机图 api。然后看了一下，又拍云可以白嫖免费的 cdn 和存储桶，leancloud 白嫖数据存储，腾讯云函数备案资源包 5 年一百多四舍五入不要钱，最终约等于白嫖麻了，舒服～</p>\n<p>注：虽然但是，leancloud 数据存储 api 每天只能请求 3 万次，对于我这种小博客来说，问题不大。</p>\n<h2 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h2>\n<h3 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h3>\n<p>简单来说，为了偷懒，和之前在 cloudflare worker 上的实现没区别，语言换成了 javasript，框架换成 express，数据存储换成 leancloud。</p>\n<p>至于为什么之前的项目用的是 typescript 而这个变成了 javascript，主要原因 leancloud 的包在 typescript 和 webpack 一起用的时候会出莫名其妙的问题（其实是 webpack 出问题），赶时间不想排查原因。</p>\n<h4 id=\"随机图接口\"><a class=\"anchor\" href=\"#随机图接口\">#</a> 随机图接口</h4>\n<p>leancloud 结构化数据中存储了一个 class 叫 Api_Data，class 中的 object 有 api_key 和 api_value 两个属性，其中有一个 api_key 属性值为 KV_INDEX 的 object 其属性 api_value 中存储了如下结构的数据，用于查找和索引：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"KV_INDEX\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"total_num\"</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"map_total\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"map_num\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string\">\"MAP_1_NUM\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string\">\"MAP_2_NUM\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string\">\"MAP_3_NUM\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"map_list\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token string\">\"MAP_KEY_1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token string\">\"MAP_KEY_2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token string\">\"MAP_KEY_3\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>存储了若干个表，表如下</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"MAP_KEY_1\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"pic_1_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_1_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"pic_2_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_2_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"pic_3_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_3_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"pic_99_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_99_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"pic_100_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_100_path\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"MAP_KEY_2\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"pic_101_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_101_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"pic_102_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_102_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"pic_103_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_103_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"pic_199_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_199_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"pic_200_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_200_path\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"MAP_KEY_3\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"pic_201_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_201_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"pic_202_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_202_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"pic_203_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_203_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"pic_299_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_299_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"pic_300_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_300_path\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>于是每次随机一张图会产生两次 read 操作，一次从索引中拿到 map_key, 一次从 map 中取数据</p>\n<h4 id=\"数据更新接口\"><a class=\"anchor\" href=\"#数据更新接口\">#</a> 数据更新接口</h4>\n<p>接受数据如下</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"pic_1_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_1_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"pic_2_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_2_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"pic_3_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_3_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"pic_99_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_99_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"pic_100_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_100_path\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>更新数据时步骤如下</p>\n<ol>\n<li>\n<p>从 kv 中取索引，在从索引中获取到表中的 key</p>\n</li>\n<li>\n<p>判断更新数据的 key 在表中时候存在，不存在则将该项添加到待更新表</p>\n</li>\n<li>\n<p>全部待更新数据添加到待更新表后，更新索引数据，最后把所有更新的数据写入到 kv 中</p>\n</li>\n</ol>\n<h3 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h3>\n<ol>\n<li>\n<p>在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudXB5dW4uY29t\">又拍云</span> 创建存储桶，绑定自定义域名，把资源上传到又拍云的存储桶中。在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudXB5dW4uY29tL2xlYWd1ZQ==\">又拍云联盟</span>加入开发者帮助计划，申请免费的云存储空间和 CDN 流量。</p>\n</li>\n<li>\n<p>在 leancloud 国内版创建一个应用。</p>\n</li>\n<li>\n<p>把 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1Rhb2lkbGUvUmFuZFBpY1NDRg==\">RandPiSCF</span> 部署到腾讯云函数。</p>\n<p>注意，需要配置一下环境变量 (在 leancloud 你创建的应用 -&gt; 设置 -&gt; 应用凭证)：</p>\n<ul>\n<li>\n<p>LEANCLOUD_APP_ID leancloud 中的 AppID</p>\n</li>\n<li>\n<p>LEANCLOUD_APP_KEY leancloud 中的 AppKey</p>\n</li>\n<li>\n<p>LEANCLOUD_APP_MASTER_KEY leancloud 中的 MasterKey</p>\n</li>\n<li>\n<p>LEANCLOUD_APP_SERVER_URL leancoud 中 REST API 服务器地址或者域名绑定中的 api 域名</p>\n</li>\n<li>\n<p>PAGE_ITEM 数据存储中的分表</p>\n</li>\n</ul>\n</li>\n<li>\n<p>随便写个脚本把图片信息丢上去完事 <span class=\"spoiler\" title=\"你知道得太多了\">本来这里是有个 rust 写的程序的，用于将图片转为 webp 然后把 hash 值和路径丢到 worker 和 scf 上，但是由于目前比较忙，有空再写</span></p>\n</li>\n</ol>\n<h2 id=\"结束语\"><a class=\"anchor\" href=\"#结束语\">#</a> 结束语</h2>\n<p>其实就是前文 <a href=\"https://www.taoidle.com/2022/05/24/%E4%BD%BF%E7%94%A8cloudflare%E5%92%8Cjsdelivr%E5%81%9A%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%9B%BEapi/\">使用 cloudflare 和 jsdelivr 做一个随机图 api</a> 的腾讯云函数偷懒实现版本，并没有对使用的资源做任何优化。后续有空优化一下，反正目前对我来说够用。</p>\n",
            "tags": [
                "nodejs",
                "cdn",
                "tencent cloud",
                "scf",
                "leancloud",
                "upyun",
                "javascript"
            ]
        },
        {
            "id": "https://www.taoidle.com/2022/05/24/%E4%BD%BF%E7%94%A8cloudflare%E5%92%8Cjsdelivr%E5%81%9A%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%9B%BEapi/",
            "url": "https://www.taoidle.com/2022/05/24/%E4%BD%BF%E7%94%A8cloudflare%E5%92%8Cjsdelivr%E5%81%9A%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E5%9B%BEapi/",
            "title": "使用cloudflare和jsdelivr做一个随机图api",
            "date_published": "2022-05-24T08:34:24.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>博客最近进行迁移，原本使用 wordpress，现迁移至 hexo。从原来的腾讯云轻量应用服务器迁移到 cloudflare page。既然如此，那原本部署在腾讯云上使用 python 搭建的随即图 api 也没必要存在了。做随机图 api 的初衷只是因为想要自己喜欢的图。</p>\n<p>注：博主的图片只有不到 30 张，小样本使用，数量较少。</p>\n<h2 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h2>\n<h3 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h3>\n<p><s>比较简单，cloudflare kv 有 1G 空间，把 hash 和图片对应的路径存进 kv 里，然后 worker 从 kv 里随机取一个出来跳转到 jsdelivr 就行了</s></p>\n<h4 id=\"随机图接口\"><a class=\"anchor\" href=\"#随机图接口\">#</a> 随机图接口</h4>\n<p>由于 cloudflare kv 的免费额度限制，write、delete、list 每天只有 1000 次，而 read 有 10 万次， 所以尽可能将 kv 操作使用 read 来实现。</p>\n<p>kv 中存储了一个 index 数据，用来查找数据，如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"KV_INDEX\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"total_num\"</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"map_total\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"map_num\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string\">\"MAP_1_NUM\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string\">\"MAP_2_NUM\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string\">\"MAP_3_NUM\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"map_list\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token string\">\"MAP_KEY_1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token string\">\"MAP_KEY_2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token string\">\"MAP_KEY_3\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>存储了若干个表，表如下</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"MAP_KEY_1\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"pic_1_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_1_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"pic_2_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_2_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"pic_3_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_3_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"pic_99_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_99_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"pic_100_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_100_path\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"MAP_KEY_2\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"pic_101_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_101_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"pic_102_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_102_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"pic_103_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_103_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"pic_199_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_199_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"pic_200_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_200_path\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"MAP_KEY_3\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"pic_201_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_201_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"pic_202_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_202_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"pic_203_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_203_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"pic_299_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_299_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"pic_300_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_300_path\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>于是每次随机一张图会产生两次 read 操作，一次从索引中拿到 map_key, 一次从 map 中取数据</p>\n<h4 id=\"数据更新接口\"><a class=\"anchor\" href=\"#数据更新接口\">#</a> 数据更新接口</h4>\n<p>接受数据如下</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"pic_1_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_1_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"pic_2_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_2_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"pic_3_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_3_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"pic_99_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_99_path\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"pic_100_hash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pic_100_path\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>更新数据时步骤如下</p>\n<ol>\n<li>\n<p>从 kv 中取索引，在从索引中获取到表中的 key</p>\n</li>\n<li>\n<p>判断更新数据的 key 在表中时候存在，不存在则将该项添加到待更新表</p>\n</li>\n<li>\n<p>全部待更新数据添加到待更新表后，更新索引数据，最后把所有更新的数据写入到 kv 中</p>\n</li>\n</ol>\n<h3 id=\"资源消耗\"><a class=\"anchor\" href=\"#资源消耗\">#</a> 资源消耗</h3>\n<h4 id=\"随机图接口-2\"><a class=\"anchor\" href=\"#随机图接口-2\">#</a> 随机图接口</h4>\n<p>于是每次随机一张图会产生两次 read 操作，一次从索引中拿到 map_key, 一次从 map 中取数据，以每天 cloudflare kv 每天 10 万次免费的 read，一天可以请求随机图接口 5 万次</p>\n<h4 id=\"数据更新接口-2\"><a class=\"anchor\" href=\"#数据更新接口-2\">#</a> 数据更新接口</h4>\n<p>假设 kv 中每个表存储 1000 条数据，kv 中已有一个表存储 100 条数据，更新的数据有 2000 条，更新时会读取索引值一次，读取已存在的所有表（这里为一次），更新的信息为 已经存在的表 1 增加了 900 条数据，创建表 2 及表 2 1000 条数据，创建表 3 及表 3 100 条数据，索引值更新。此时会对 kv 做 4 次写入，总共是 2 次读取，4 次写入。</p>\n<h3 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h3>\n<ol>\n<li>\n<p>在 github 上创建一个空仓库用于存放图片，然后将自己喜欢的图片提交到该仓库即可，然后就可以在 jsdelivr 上取到该仓库的文件</p>\n<pre><code class=\"language-console\">https://cdn.assets.taoidle.com/gh/github用户名/仓库名@分支\n</code></pre>\n</li>\n<li>\n<p>克隆 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1Rhb2lkbGUvUmFuZFBpY1dvcmtlcg==\">RandPicWorker</span> 这个项目，在项目根目录下执行 yarn 打好依赖。然后使用以下命令登录 cloudflare</p>\n<pre><code class=\"language-console\">yarn run wrangler login\n</code></pre>\n</li>\n<li>\n<p>在 cloudflare 上创建一个 kv namespace</p>\n</li>\n<li>\n<p>填写项目里 wrangler.toml 文件缺少的信息</p>\n<p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/Snipaste_2022-05-25_22-30-06.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>执行 package.json scripts 里的 publish 命令</p>\n</li>\n<li>\n<p>随便写个脚本把图片信息丢上去完事 <span class=\"spoiler\" title=\"你知道得太多了\">本来这里是有个 rust 写的程序的，用于将图片转为 webp 然后把 hash 值和路径丢到 worker 上，但是由于目前比较忙，有空再写</span></p>\n</li>\n</ol>\n<h2 id=\"结束语\"><a class=\"anchor\" href=\"#结束语\">#</a> 结束语</h2>\n<p>代码过于简单没啥好说的，好久没写博客了上来水一篇</p>\n<hr />\n<p>端午假期稍微更新了一下</p>\n",
            "tags": [
                "nodejs",
                "cloudflare",
                "cloudflare worker",
                "github",
                "cdn",
                "typescript"
            ]
        },
        {
            "id": "https://www.taoidle.com/2020/10/22/windows%E4%B8%8Bclionopencv%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "url": "https://www.taoidle.com/2020/10/22/windows%E4%B8%8Bclionopencv%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "title": "Windows下Clion+OpenCV开发环境搭建",
            "date_published": "2020-10-22T04:11:18.000Z",
            "content_html": "<h3 id=\"准备\"><a class=\"anchor\" href=\"#准备\">#</a> 准备</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9jbGlvbi8=\">Clion</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvbWluZ3ctdzY0L2ZpbGVzLw==\">MinGW</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbWFrZS5vcmcvZG93bmxvYWQv\">Cmake</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuY3Yub3JnL3JlbGVhc2VzLw==\">OpenCV</span></li>\n</ul>\n<h3 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h3>\n<ol>\n<li>安装 Clion</li>\n<li>安装 MinGW 并将 MinGW\\bin 添加到环境变量</li>\n<li>安装 CMake</li>\n<li>解压 OpenCV 源码</li>\n<li>打开 CMake, 在第一个框中打开源码目录，第二个框为编译目录，点击 Configure <img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/wp_editor_md_645ab42b1af5be15646efb3290064a98.jpg\" alt=\"\" />再次点击 Configure 红色消失 <img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/wp_editor_md_e4af1ce913054df34ee86ef4408fde7e.jpg\" alt=\"\" /> 点击 Generate <img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/wp_editor_md_3c90537c4260f5537ea63ea0f55eafc6.jpg\" alt=\"\" /></li>\n<li>打开 CMD 进入到 MinGW-build 目录下，执行 mingw32-make</li>\n<li>上一步执行完成后执行 mingw32-make install，生成 install 文件夹 <img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/wp_editor_md_a5da3358b4fddbd6fc4dc897bd325052.jpg\" alt=\"\" /></li>\n</ol>\n<h3 id=\"clion中使用opencv\"><a class=\"anchor\" href=\"#clion中使用opencv\">#</a> Clion 中使用 OpenCV</h3>\n<ul>\n<li>Clion 设置 <img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/wp_editor_md_ed7877bd36d1481e37c61faba10c778b.jpg\" alt=\"\" /></li>\n<li>CMakeLists.txt 文件配置</li>\n</ul>\n<pre><code>cmake_minimum_required(VERSION 3.17)\nproject(test)\nset(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;)\nset(OpenCV_DIR &quot;C:\\\\OpenCV&quot;)\nset(CMAKE_MODULE_PATH $&#123;CMAKE_MODULE_PATH&#125; &quot;$&#123;CMAKE_SOURCE_DIR&#125;/cmake/&quot;)\nfind_package(OpenCV)\ninclude_directories($&#123;OpenCV_INCLUDE_DIRS&#125;)\nadd_executable(test camera_calibration_correct.cpp)\nset(OpenCV_LIBS opencv_core opencv_imgproc opencv_highgui opencv_imgcodecs)\ntarget_link_libraries(test $&#123;OpenCV_LIBS&#125;)\n</code></pre>\n",
            "tags": [
                "opencv",
                "图像处理"
            ]
        },
        {
            "id": "https://www.taoidle.com/2020/07/02/manjaro-npm%E6%8D%A2%E6%BA%90/",
            "url": "https://www.taoidle.com/2020/07/02/manjaro-npm%E6%8D%A2%E6%BA%90/",
            "title": "manjaro npm换源",
            "date_published": "2020-07-02T13:29:20.000Z",
            "content_html": "<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> pacman -S nodejs <span class=\"token function\">npm</span></pre></td></tr></table></figure><h2 id=\"换源\"><a class=\"anchor\" href=\"#换源\">#</a> 换源</h2>\n<ol>\n<li>\n<p>方法一：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> registry https://registry.npm.taobao.org</pre></td></tr></table></figure></li>\n</ol>\n<hr />\n<ol start=\"2\">\n<li>\n<p>方法二： 安装 cnpm 代替 npm</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g cnpm --registry<span class=\"token operator\">=</span>https://registry.npm.taobao.org</pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "Linux",
                "manjaro",
                "nodejs",
                "npm"
            ]
        },
        {
            "id": "https://www.taoidle.com/2020/06/12/ubuntu20-04%E6%8D%A2%E6%BA%90/",
            "url": "https://www.taoidle.com/2020/06/12/ubuntu20-04%E6%8D%A2%E6%BA%90/",
            "title": "ubuntu20.04换源",
            "date_published": "2020-06-11T17:52:27.000Z",
            "content_html": "<p>依次执行以下命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">vim</span>        安装vim编辑器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span>  <span class=\"token function\">cp</span>   /etc/apt/sources.list   /etc/apt/sources.list.bak        备份源文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span>  <span class=\"token function\">chmod</span>  <span class=\"token number\">777</span>  /etc/apt/sources.list         修改权限</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span>  <span class=\"token function\">vim</span>   /etc/apt/sources.list       编辑源文件</pre></td></tr></table></figure><p>在 vim 编辑器中将原来内容替换为</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal universe</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates universe</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal multiverse</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates multiverse</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security universe</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security multiverse</pre></td></tr></table></figure><p>这里为清华源，可将链接替换为你喜欢的软件源 然后执行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> list --upgradable </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade</pre></td></tr></table></figure><p>结束语：啊，又水了一篇博文，快乐（不是</p>\n",
            "tags": [
                "Linux",
                "ubuntu",
                "ubuntu20.04"
            ]
        },
        {
            "id": "https://www.taoidle.com/2020/06/12/%E5%85%B3%E4%BA%8Eubuntu20-04%E5%AE%89%E8%A3%85arm-linux-gcc%E5%8F%91%E7%94%9F%E7%9A%84%E9%94%99%E8%AF%AF/",
            "url": "https://www.taoidle.com/2020/06/12/%E5%85%B3%E4%BA%8Eubuntu20-04%E5%AE%89%E8%A3%85arm-linux-gcc%E5%8F%91%E7%94%9F%E7%9A%84%E9%94%99%E8%AF%AF/",
            "title": "关于Ubuntu20.04安装arm-linux-gcc发生的错误",
            "date_published": "2020-06-11T17:30:58.000Z",
            "content_html": "<p>ubuntu20.04 安装 arm-linux-gcc 发生错误:libpng3 : Depends: libpng12-0 (&gt;= 1.2.5.0-2) but it is not installed <img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/wp_editor_md_ffc711dadcd44f60ffc78cf327cc4886.jpg\" alt=\"\" /> 解决方法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> add-apt-repository ppa:linuxuprising/libpng12</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> list --upgradable</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> --fix-broken <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> gcc-arm-linux-gnueabi</pre></td></tr></table></figure>",
            "tags": [
                "ubuntu",
                "ARM",
                "arm-linux-gcc",
                "gcc"
            ]
        },
        {
            "id": "https://www.taoidle.com/2020/05/10/android-studio%E8%8E%B7%E5%8F%96sha1/",
            "url": "https://www.taoidle.com/2020/05/10/android-studio%E8%8E%B7%E5%8F%96sha1/",
            "title": "Android Studio获取SHA1",
            "date_published": "2020-05-10T08:11:21.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>使用高德地图，腾讯地图等地图 api 都需要用到 SHA1 值</p>\n<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h2>\n<ol>\n<li>检查 Android Studio 工程下时候存在 keystore 类型文件，如果不存在则执行命令</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keytool -v -list -keystore keystore文件路径</pre></td></tr></table></figure><p>会出现错误</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keytool 错误: java.lang.Exception: 密钥库文件不存在</pre></td></tr></table></figure><ol start=\"2\">\n<li>创建密钥库文件</li>\n</ol>\n<p>在 Android Studio 中打开 Terminal，这里以创建一个 debug.keystore 为例，输入命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keytool -genkey -v -keystore debug.keystore -alias androiddebugkey -keyalg RSA -validity <span class=\"token number\">10000</span></pre></td></tr></table></figure><p>填写注册信息（可随意填写），设置密码，密码需记住后续获取 SHA1 需要用到密码 <img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/wp_editor_md_dda6a1e249ae12028b5cb20d65b16d4c.jpg\" alt=\"\" /> 查看 debug.keystore 是否生成，得到 SHA1 值（红框部分）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keytool -list -v -keystore debug.keystore</pre></td></tr></table></figure><p><img data-src=\"https://cdn.assets.taoidle.com/gh/taoidle/taoidle.github.io@master/assets/images/wp_editor_md_523dfce26e74a850d2cd1eda3171290a.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "android",
                "android studio"
            ]
        }
    ]
}